#!/bin/bash

# This hook is called by "git commit" after the commit message editor
# is closed. The default behavior is to run the tests and if they pass,
# the commit is allowed to proceed. If the tests fail, the commit is
# aborted. The hook can be bypassed by using the --no-verify option
# when running "git commit".

#! This next check could ask for user input to sign the commit as it's now
#! using the `git commit` command instead of `git commit -m` which is the
#! default behavior of the `git commit` command. This could be a problem if the
#! user is not expecting it. This should be revisited in the future. - @jrh 2025

# Check if the commit is being run with --no-verify or --amend and exit if so
# as post-commit usually ignores --no-verify and --amend flags.
if [[ $(ps -ocommand= -p $PPID) == *"git"*"commit"*"--no-verify"* ]] || [[ $(ps -ocommand= -p $PPID) == *"git"*"commit"*"--amend"* ]]; then
  printf '\n\033[0;33mSkipping post-commit hook... ðŸ¤¨\033[0m\n'
  exit 0
fi

list="issue spike task"

listRE="^($(printf '%s\n' "$list" | tr ' ' '|'))/"

BRANCH_NAME=$(git branch --show-current | grep -E "$listRE" | sed 's/* //')

printf '\n\033[0;105mChecking "%s"... \033[0m\n' "$BRANCH_NAME"

if echo "$BRANCH_NAME" | grep -q '^(rebase)|(production)*$'; then
 	printf '\n\033[0;32mNo checks necessary on "%s", pushing now... ðŸŽ‰\033[0m\n' "$BRANCH_NAME"
	exit 0
fi

# Check for existence of "new or modified" test files
NEW_TEST_FILES="$(git diff --diff-filter=ACDM --name-only --cached | grep -E '(./test/*)$')"
# Get all test files to run tests
CURRENT_TEST_FILES="$(git ls-files | grep -i -E '(_test\.rb)$')"

WORK_DONE=0

if [ -z "$NEW_TEST_FILES" ]; then
  printf '\n\033[0;31mThere are currently no new tests found in "%s". ðŸ¤¨\033[0m\n' "$BRANCH_NAME"
  printf '\n\033[0;31mContinuing without new tests... ðŸ˜–\033[0m\n'
fi

if [ -n "$NEW_TEST_FILES" ]; then
  #Count the number of new test files
  file_count=$(echo "$NEW_TEST_FILES" | wc -l)
  # Check if there are any new test files
  if [ "$file_count" -ne 0 ]; then
    printf '\n\033[0;33mFound %d new test files in "%s"  ðŸŽ‰.\033[0m\n' "$file_count" "$BRANCH_NAME"
  fi

  for file in $NEW_TEST_FILES; do
    # if file is system test file run rake test:system filename
    if [[ "$file" == *"./test/system/*_test.rb" ]]; then
      printf '\n\033[0;33mRunning system test for "%s"...\033[0m\n', "$file"
      bundle exec rake test:system "$file"
    else
      printf '\n\033[0;33mRunning unit test on "%s"...\033[0m\n', "$file"
      bundle exec rake test "$file"
    fi
  done
  RUBY_TEST_EXIT_CODE=$?
  WORK_DONE=1
fi

if [ -n "$CURRENT_TEST_FILES" ] && [ "$WORK_DONE" -eq 0 ]; then
  printf '\n\033[0;32mRunning all tests instead... \033[0m\n'
  make test
  RUBY_TEST_EXIT_CODE=$?
  WORK_DONE=1
else
  RUBY_TEST_EXIT_CODE=0
fi

if [ ! $RUBY_TEST_EXIT_CODE -eq 0 ]; then
  git reset HEAD~
  printf '\n\033[0;31mCannot push, tests are failing. Use --no-verify to force push. ðŸ˜–\033[0m\n'
  exit 1
fi

if [ $WORK_DONE -eq 1 ]; then
  printf '\n\033[0;32mAll tests are green, pushing... ðŸŽ‰\033[0m\n'
  exit 0
fi
